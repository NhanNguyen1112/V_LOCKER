


/*
*  Bàn phím
*  màn hình
*  1 nút nhấn gửi hàng
*  UART Máy in nhiệt
*  UART đầu quét QR
*  UART Bill tiền 
*  
* Module RS485 Âm thanh
* Module RS485: máy in nhiệt, đầu đọc QR
* 
*/



  void dong_bo_task(void *parameter) //thuc hien cac tac vu dong bo
  {
    DynamicJsonDocument doc(10000);
    hanh_dong data;
    user_setting user_ID;
    static uint32_t lastTick_FOTA=0;
    static uint32_t lastTick=0;
    static uint32_t lastTick_status_machine=0;
    static uint32_t lastTick_card_info=0;
    static uint32_t diachi=0;
    
    while(1)
    {
      if (!WiFi.isConnected()) //Kiem  tra ket noi Wifi
      {
        if ((uint32_t)(millis() - lastTick) > 5000)
        {
          if (WiFi.reconnect())
          {
            esp_wifi_set_ps(WIFI_PS_NONE);
          }
          lastTick = millis();
        }
      }

      if((WiFi.status() == WL_CONNECTED))  //Kiem tra update FOTA
      {
        if((uint32_t)(millis() - lastTick_FOTA) > 60000) //60s kiem tra update 1 lan
        {
          // Serial.println("Kiem tra FOTA");
          VHITEK::FOTA::Star_update();
          lastTick_FOTA = millis();
        }  
      }

      if ((WiFi.status() == WL_CONNECTED))  //GUI lich su hanh dong mo cua len Server
      { 
        if(check_his_send == true) //Nếu có hành động mở cửa
        {
          data = VHITEK::EEPROM::read_eeprom_2(diachi_giaodich); //doc lich su giao dich da luu trong EEPROM 2
          if(check_read_eeprom_2 == true) //Neu doc trong EEPROM ra OK
          {
            /*Serial.print("IDX: "); Serial.print(data.IDX);
            Serial.print(" - Status: "); Serial.print(data.trang_thai);
            Serial.print(" - So tu: "); Serial.print(data.so_tu);
            Serial.print(" - Send data: "); Serial.print(data.send_data_check);
            Serial.print(" - ID: ");
            for(int i=0; i<=12; i++)
            {
                Serial.print(data.ID[i]-'0');
                // Serial.printf("%02X ",giao_dich.ID[i]);
            }            

            Serial.print(" - Ngay: "); Serial.print(data.ngay);
            Serial.print(" - Thang: "); Serial.print(data.thang);
            Serial.print(" - Nam: "); Serial.print(data.nam);
            Serial.print(" | Gio: "); Serial.print(data.gio);
            Serial.print(" - Phut: "); Serial.print(data.phut);
            Serial.print(" - Check Sum: "); Serial.println(data.check_sum);
            delay(3000); */

            if(data.send_data_check == 1) //CHUA gui
            {
              HTTPClient http;
              http.begin("http://159.223.48.4:8000/locker/sethistorytransactionlocker"); //Specify the URL
              http.addHeader("Content-Type", "application/json");              
              String json_data=VHITEK::Config::toJson(data);
              // Serial.println(VHITEK::Config::toJson(data).c_str());

              int post = http.POST(json_data.c_str());
              String payload = http.getString();
              // Serial.println(payload);          
              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {
                    // Serial.println("Da gui duoc transaction");
                    data.send_data_check = 0;
                    accessI2C1Bus([&]{
                        myMem2.put(diachi+7, data.send_data_check); //cap nhat lai Data send check
                    }, 100);    
                    check_his_send = false;                
                  }
                }
              }
              http.end();     
            }
          }
        }
        else 
        {
          if(diachi <= 64000)
          {
            data = VHITEK::EEPROM::read_eeprom_2(diachi); //doc lich su giao dich da luu trong EEPROM 2
            if(check_read_eeprom_2 == true) //Neu doc trong EEPROM ra OK
            {
              /*Serial.print("IDX: "); Serial.print(data.IDX);
              Serial.print(" - Status: "); Serial.print(data.trang_thai);
              Serial.print(" - So tu: "); Serial.print(data.so_tu);
              Serial.print(" - Send data: "); Serial.print(data.send_data_check);
              Serial.print(" - ID: ");
              for(int i=0; i<=12; i++)
              {
                  Serial.print(data.ID[i]-'0');
                  // Serial.printf("%02X ",giao_dich.ID[i]);
              }            

              Serial.print(" - Ngay: "); Serial.print(data.ngay);
              Serial.print(" - Thang: "); Serial.print(data.thang);
              Serial.print(" - Nam: "); Serial.print(data.nam);
              Serial.print(" | Gio: "); Serial.print(data.gio);
              Serial.print(" - Phut: "); Serial.print(data.phut);
              Serial.print(" - Check Sum: "); Serial.println(data.check_sum);
              delay(3000);*/
              if(data.send_data_check == 1) //CHUA gui
              {
                HTTPClient http;
                http.begin("http://159.223.48.4:8000/locker/sethistorytransactionlocker"); //Specify the URL
                http.addHeader("Content-Type", "application/json");              
                String json_data=VHITEK::Config::toJson(data);
                // Serial.println(VHITEK::Config::toJson(data).c_str());

                int post = http.POST(json_data.c_str());
                String payload = http.getString();
                // Serial.println(payload);

                if (post == 200)  //Check for the returning code
                { 
                  DeserializationError error = deserializeJson(doc, payload);
                  if (error == 0)
                  {
                    // Serial.println(doc["status"].as<String>());
                    if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                    {
                      // Serial.println("Da gui duoc transaction");
                      // Serial.println(doc["status"].as<String>());
                      data.send_data_check = 0;
                      accessI2C1Bus([&]{
                          myMem2.put(diachi+7, data.send_data_check); //cap nhat lai Data send check
                      }, 100);                    
                    }
                  }
                }
                http.end();  
              }
            }
            diachi+=sizeof(hanh_dong);  
          }
          else diachi=0;
        }
      }

      if(check_send_tong_so_tu == true) //Gui Tong so tu len
      {
        if ((WiFi.status() == WL_CONNECTED))
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updatetotalcabined"); //Specify the URL
          http.addHeader("Content-Type", "application/json");   

          String json_data = VHITEK::Config::Json_tong_tu();    
          int post = http.POST(json_data.c_str());
          String payload = http.getString();       
          if (post == 200)
          {
            DeserializationError error = deserializeJson(doc, payload);
            if (error == 0)
            {
              // Serial.println(doc["status"].as<String>());
              if(doc["status"].as<boolean>() == true) //NEU da gui duoc
              {
                // Serial.println("Da gui Tong So Tu");
                check_send_tong_so_tu = false;              
              }
              else 
              {
                check_send_tong_so_tu = true; 
              }
            }     
          }
          http.end();   
        }
      }

      if((WiFi.status() == WL_CONNECTED))  //Gui thong tin tu len Server
      {
        if ((uint32_t)(millis() - lastTick_card_info) > 2000) //5s gui len 1 lan
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updateinforcard"); //Specify the URL
          http.addHeader("Content-Type", "application/json");        

          for(int sotu=1; sotu<=Tong_so_tu; sotu++) 
          {
            accessI2C1Bus([&]{
                    myMem.get(VHITEK::Menu::tinh_o_luu_the(sotu), user_ID); //Doc Check SUM trong eeprom              
            }, 100);

            if(user_ID.send_data_check == 1) //Them tu moi va gui len Server
            {
              String json_data = VHITEK::Config::Json_thong_tin_tu(user_ID);    
              int post = http.POST(json_data.c_str());
              String payload = http.getString();     
              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {     
                    user_ID.send_data_check=0;
                    if(VHITEK::EEPROM::write_eeprom_1(user_ID))
                    {
                      // VHITEK::Config::xem_eeprom_tu_bat_ky(sotu); //Xem eeprom khi da luu
                      // Serial.println("Đã gửi được: Thêm mới");     
                    }
                    // else{} // Serial.println("KHÔNG gửi được: Thêm mới");               
                  }
                }
                http.end();            
              }
            }

            if(user_ID.send_data_check == 2) //Xoa va gui len server
            {
              memset(&user_ID, 0, sizeof(user_ID));       
              user_ID.so_tu = sotu;
              user_ID.ID_user[0] = '0';
              user_ID.mat_khau[0] = '0';   

              String json_data = VHITEK::Config::Json_thong_tin_tu(user_ID);    
              int post = http.POST(json_data.c_str());
              String payload = http.getString();  
              // Serial.println(VHITEK::Config::Json_thong_tin_tu(user_ID).c_str());

              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {     
                    memset(&user_ID, 0, sizeof(user_ID));
                    accessI2C1Bus([&]{
                          myMem.put(VHITEK::Menu::tinh_o_luu_the(sotu), user_ID); //Doc Check SUM trong eeprom              
                    }, 100);
                    // VHITEK::Config::xem_eeprom_tu_bat_ky(sotu); //Xem eeprom khi da luu
                    // Serial.println("Đã gửi được: XÓA");                                                  
                  }
                }
              }
              http.end(); 
            }

          } //END For
          lastTick_card_info = millis();
        }
      }

      if((WiFi.status() == WL_CONNECTED)) //Gui trang thai may
      {
        if ( ((uint32_t)(millis() - lastTick_status_machine) > 1000) or check_update_machine == true ) //60s update 1 lan
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updatestatuslocker"); //Specify the URL
          http.addHeader("Content-Type", "application/json");              
          String json_data=VHITEK::Config::Json_machine_status();
          // Serial.println(VHITEK::Config::Json_machine_status().c_str());

          int post = http.POST(json_data.c_str());
          String payload = http.getString();
          // Serial.println(payload);          

          if (post == 200)  //Check for the returning code
          { 
            DeserializationError error = deserializeJson(doc, payload);
            if (error == 0)
            {
              // Serial.println(doc["status"].as<String>());
              if(doc["status"].as<boolean>() == true) //NEU da gui duoc
              {
                check_update_machine = false;
                // Serial.println("Đã gửi được trạng thái máy");             
              }
            }
          }
          http.end();  

          lastTick_status_machine = millis();
        }
      }

      delay(10);
    }
  } //End void dong bo











































