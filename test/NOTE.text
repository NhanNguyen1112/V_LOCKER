


/*
*  Bàn phím
*  màn hình
*  1 nút nhấn gửi hàng
*  UART Máy in nhiệt
*  UART đầu quét QR
*  UART Bill tiền 
*  
* Module RS485 Âm thanh
* Module RS485: máy in nhiệt, đầu đọc QR
* 
*/



  void dong_bo_task(void *parameter) //thuc hien cac tac vu dong bo
  {
    DynamicJsonDocument doc(10000);
    hanh_dong data;
    user_setting user_ID;
    static uint32_t lastTick_FOTA=0;
    static uint32_t lastTick=0;
    static uint32_t lastTick_status_machine=0;
    static uint32_t lastTick_card_info=0;
    static uint32_t diachi=0;
    
    while(1)
    {
      if (!WiFi.isConnected()) //Kiem  tra ket noi Wifi
      {
        if ((uint32_t)(millis() - lastTick) > 5000)
        {
          if (WiFi.reconnect())
          {
            esp_wifi_set_ps(WIFI_PS_NONE);
          }
          lastTick = millis();
        }
      }

      if((WiFi.status() == WL_CONNECTED))  //Kiem tra update FOTA
      {
        if((uint32_t)(millis() - lastTick_FOTA) > 60000) //60s kiem tra update 1 lan
        {
          // Serial.println("Kiem tra FOTA");
          VHITEK::FOTA::Star_update();
          lastTick_FOTA = millis();
        }  
      }

      if ((WiFi.status() == WL_CONNECTED))  //GUI lich su hanh dong mo cua len Server
      { 
        if(check_his_send == true) //Nếu có hành động mở cửa
        {
          data = VHITEK::EEPROM::read_eeprom_2(diachi_giaodich); //doc lich su giao dich da luu trong EEPROM 2
          if(check_read_eeprom_2 == true) //Neu doc trong EEPROM ra OK
          {
            /*Serial.print("IDX: "); Serial.print(data.IDX);
            Serial.print(" - Status: "); Serial.print(data.trang_thai);
            Serial.print(" - So tu: "); Serial.print(data.so_tu);
            Serial.print(" - Send data: "); Serial.print(data.send_data_check);
            Serial.print(" - ID: ");
            for(int i=0; i<=12; i++)
            {
                Serial.print(data.ID[i]-'0');
                // Serial.printf("%02X ",giao_dich.ID[i]);
            }            

            Serial.print(" - Ngay: "); Serial.print(data.ngay);
            Serial.print(" - Thang: "); Serial.print(data.thang);
            Serial.print(" - Nam: "); Serial.print(data.nam);
            Serial.print(" | Gio: "); Serial.print(data.gio);
            Serial.print(" - Phut: "); Serial.print(data.phut);
            Serial.print(" - Check Sum: "); Serial.println(data.check_sum);
            delay(3000); */

            if(data.send_data_check == 1) //CHUA gui
            {
              HTTPClient http;
              http.begin("http://159.223.48.4:8000/locker/sethistorytransactionlocker"); //Specify the URL
              http.addHeader("Content-Type", "application/json");              
              String json_data=VHITEK::Config::toJson(data);
              // Serial.println(VHITEK::Config::toJson(data).c_str());

              int post = http.POST(json_data.c_str());
              String payload = http.getString();
              // Serial.println(payload);          
              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {
                    // Serial.println("Da gui duoc transaction");
                    data.send_data_check = 0;
                    accessI2C1Bus([&]{
                        myMem2.put(diachi+7, data.send_data_check); //cap nhat lai Data send check
                    }, 100);    
                    check_his_send = false;                
                  }
                }
              }
              http.end();     
            }
          }
        }
        else 
        {
          if(diachi <= 64000)
          {
            data = VHITEK::EEPROM::read_eeprom_2(diachi); //doc lich su giao dich da luu trong EEPROM 2
            if(check_read_eeprom_2 == true) //Neu doc trong EEPROM ra OK
            {
              /*Serial.print("IDX: "); Serial.print(data.IDX);
              Serial.print(" - Status: "); Serial.print(data.trang_thai);
              Serial.print(" - So tu: "); Serial.print(data.so_tu);
              Serial.print(" - Send data: "); Serial.print(data.send_data_check);
              Serial.print(" - ID: ");
              for(int i=0; i<=12; i++)
              {
                  Serial.print(data.ID[i]-'0');
                  // Serial.printf("%02X ",giao_dich.ID[i]);
              }            

              Serial.print(" - Ngay: "); Serial.print(data.ngay);
              Serial.print(" - Thang: "); Serial.print(data.thang);
              Serial.print(" - Nam: "); Serial.print(data.nam);
              Serial.print(" | Gio: "); Serial.print(data.gio);
              Serial.print(" - Phut: "); Serial.print(data.phut);
              Serial.print(" - Check Sum: "); Serial.println(data.check_sum);
              delay(3000);*/
              if(data.send_data_check == 1) //CHUA gui
              {
                HTTPClient http;
                http.begin("http://159.223.48.4:8000/locker/sethistorytransactionlocker"); //Specify the URL
                http.addHeader("Content-Type", "application/json");              
                String json_data=VHITEK::Config::toJson(data);
                // Serial.println(VHITEK::Config::toJson(data).c_str());

                int post = http.POST(json_data.c_str());
                String payload = http.getString();
                // Serial.println(payload);

                if (post == 200)  //Check for the returning code
                { 
                  DeserializationError error = deserializeJson(doc, payload);
                  if (error == 0)
                  {
                    // Serial.println(doc["status"].as<String>());
                    if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                    {
                      // Serial.println("Da gui duoc transaction");
                      // Serial.println(doc["status"].as<String>());
                      data.send_data_check = 0;
                      accessI2C1Bus([&]{
                          myMem2.put(diachi+7, data.send_data_check); //cap nhat lai Data send check
                      }, 100);                    
                    }
                  }
                }
                http.end();  
              }
            }
            diachi+=sizeof(hanh_dong);  
          }
          else diachi=0;
        }
      }

      if(check_send_tong_so_tu == true) //Gui Tong so tu len
      {
        if ((WiFi.status() == WL_CONNECTED))
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updatetotalcabined"); //Specify the URL
          http.addHeader("Content-Type", "application/json");   

          String json_data = VHITEK::Config::Json_tong_tu();    
          int post = http.POST(json_data.c_str());
          String payload = http.getString();       
          if (post == 200)
          {
            DeserializationError error = deserializeJson(doc, payload);
            if (error == 0)
            {
              // Serial.println(doc["status"].as<String>());
              if(doc["status"].as<boolean>() == true) //NEU da gui duoc
              {
                // Serial.println("Da gui Tong So Tu");
                check_send_tong_so_tu = false;              
              }
              else 
              {
                check_send_tong_so_tu = true; 
              }
            }     
          }
          http.end();   
        }
      }

      if((WiFi.status() == WL_CONNECTED))  //Gui thong tin tu len Server
      {
        if ((uint32_t)(millis() - lastTick_card_info) > 2000) //5s gui len 1 lan
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updateinforcard"); //Specify the URL
          http.addHeader("Content-Type", "application/json");        

          for(int sotu=1; sotu<=Tong_so_tu; sotu++) 
          {
            accessI2C1Bus([&]{
                    myMem.get(VHITEK::Menu::tinh_o_luu_the(sotu), user_ID); //Doc Check SUM trong eeprom              
            }, 100);

            if(user_ID.send_data_check == 1) //Them tu moi va gui len Server
            {
              String json_data = VHITEK::Config::Json_thong_tin_tu(user_ID);    
              int post = http.POST(json_data.c_str());
              String payload = http.getString();     
              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {     
                    user_ID.send_data_check=0;
                    if(VHITEK::EEPROM::write_eeprom_1(user_ID))
                    {
                      // VHITEK::Config::xem_eeprom_tu_bat_ky(sotu); //Xem eeprom khi da luu
                      // Serial.println("Đã gửi được: Thêm mới");     
                    }
                    // else{} // Serial.println("KHÔNG gửi được: Thêm mới");               
                  }
                }
                http.end();            
              }
            }

            if(user_ID.send_data_check == 2) //Xoa va gui len server
            {
              memset(&user_ID, 0, sizeof(user_ID));       
              user_ID.so_tu = sotu;
              user_ID.ID_user[0] = '0';
              user_ID.mat_khau[0] = '0';   

              String json_data = VHITEK::Config::Json_thong_tin_tu(user_ID);    
              int post = http.POST(json_data.c_str());
              String payload = http.getString();  
              // Serial.println(VHITEK::Config::Json_thong_tin_tu(user_ID).c_str());

              if (post == 200)  //Check for the returning code
              { 
                DeserializationError error = deserializeJson(doc, payload);
                if (error == 0)
                {
                  // Serial.println(doc["status"].as<String>());
                  if(doc["status"].as<boolean>() == true) //NEU da gui duoc
                  {     
                    memset(&user_ID, 0, sizeof(user_ID));
                    accessI2C1Bus([&]{
                          myMem.put(VHITEK::Menu::tinh_o_luu_the(sotu), user_ID); //Doc Check SUM trong eeprom              
                    }, 100);
                    // VHITEK::Config::xem_eeprom_tu_bat_ky(sotu); //Xem eeprom khi da luu
                    // Serial.println("Đã gửi được: XÓA");                                                  
                  }
                }
              }
              http.end(); 
            }

          } //END For
          lastTick_card_info = millis();
        }
      }

      if((WiFi.status() == WL_CONNECTED)) //Gui trang thai may
      {
        if ( ((uint32_t)(millis() - lastTick_status_machine) > 1000) or check_update_machine == true ) //60s update 1 lan
        {
          HTTPClient http;
          http.begin("http://159.223.48.4:8000/locker/updatestatuslocker"); //Specify the URL
          http.addHeader("Content-Type", "application/json");              
          String json_data=VHITEK::Config::Json_machine_status();
          // Serial.println(VHITEK::Config::Json_machine_status().c_str());

          int post = http.POST(json_data.c_str());
          String payload = http.getString();
          // Serial.println(payload);          

          if (post == 200)  //Check for the returning code
          { 
            DeserializationError error = deserializeJson(doc, payload);
            if (error == 0)
            {
              // Serial.println(doc["status"].as<String>());
              if(doc["status"].as<boolean>() == true) //NEU da gui duoc
              {
                check_update_machine = false;
                // Serial.println("Đã gửi được trạng thái máy");             
              }
            }
          }
          http.end();  

          lastTick_status_machine = millis();
        }
      }

      delay(10);
    }
  } //End void dong bo


//Máy in nhiệt và cảm biến QR
        void locker_Barcode()
        {
            char key = VHITEK::Keypad::getKey();
            // static user_setting New_user;
            static int step = 0;
            static int pos=0;
            static int start = 0;
            String barcode;
            char buf[50];
            static int sotu;

            auto exit = []() { // Reset pos music
                step = 0;
                start = 0;
                pos=0;
                ID = 0;
            };

            if(key)
            {
                if(key == '1') //nhan gui hang
                {
                    start = 1;
                }
                else if (key == '#') exit();
            }
            else 
            {
                u8g2.clearBuffer();
                u8g2.drawXBM(0, 0, 128, 64, xinchaomoichontu_bits);                       
                u8g2.sendBuffer();

                while (Serial2.available()>0)
                {
                    VHITEK::bufferGM65 = Serial2.readString();
                    // Serial.println(VHITEK::bufferGM65);
                    // sotu = xuat_sotu(VHITEK::bufferGM65);

                    if(VHITEK::Menu::kiem_tra_tu_da_co(sotu) == 1)
                    {
                        if( locker_open(sotu)==1 )
                        {
                            u8g2.clearBuffer();
                            u8g2.drawXBM(0, 0, 128, 64, tudamo_bits);
                            u8g2.sendBuffer();
                            // xoatu(sotu);
                            sotu=0;
                            delay(2000);
                        }
                        else 
                        {
                            u8g2.clearBuffer();
                            u8g2.drawXBM(0, 0, 128, 64, khongmoduoccua_bits);
                            u8g2.sendBuffer(); 
                            sotu=0;
                            delay(2000);
                        }
                    }
                    else{
                        VHITEK::Display::TB_tu_chua_su_dung();
                        sotu=0;
                        delay(2000);
                    }
                    
                }
            }

            while(start == 1)
            {
                key = VHITEK::Keypad::getKey();

                if(step==0) //Tìm tủ chưa SD
                {
                    for(int i=0; i<= sizeof(tuchuasd); i++)
                    {
                        if(tuchuasd[i]>0)
                        {
                            // New_user.so_tu = tuchuasd[i];
                            // barcode = xuatbarcode(New_user.so_tu);
                            // Serial.println(barcode);
                            // Serial.println(barcode.c_str());
                            step=1;
                            break;
                        }
                    }
                }
                else if(step==1) //in bill
                {
                    // Serial.println(buf);

                    step=2;
                }
                else if(step==2) //mo cua
                {
                    // if(locker_open(New_user.so_tu))
                    // {
                    //     u8g2.clearBuffer();
                    //     u8g2.drawXBM(0, 0, 128, 64, tudamo_bits);
                    //     u8g2.sendBuffer();

                    //     if(VHITEK::EEPROM::write_eeprom_1(New_user))
                    //     {
                    //         tuchuasd[New_user.so_tu-1] = 0;
                    //         delay(2000);
                    //         step=3;
                    //     }
                    // }
                    // else 
                    // {
                    //     u8g2.clearBuffer();
                    //     u8g2.drawXBM(0, 0, 128, 64, khongmoduoccua_bits);
                    //     u8g2.sendBuffer();      
                    //     delay(2000);
                    //     step=3;                        
                    // }
                }
                else if(step==3)
                {
                    exit();
                    break;
                }

                if (key) // Neu co nhan nut
                {
                    if(key == '#')
                    {
                        exit();
                        break;
                    }
                }
            }
        }


//Nút vào menu là nút gưi hàng
        void locker_button()
        {
            char key = VHITEK::Keypad::getKey();
            static user_setting New_user;
            static user_setting user_check;
            static int step = 0;
            static int pos=0;
            static int start = 0;
            static char ID_doc[13];
            static char tagid[13];

            auto exit = []() { // Reset pos music
                step = 0;
                start = 0;
                pos=0;
                ID = 0;
            };

            if(key)
            {
                if(key == '1') //nhan gui hang
                {
                    start = 1;
                }
                else if (key == '#') exit();
            }
            else 
            {          
                u8g2.clearBuffer();
                u8g2.drawXBM(0, 0, 128, 64, xinchaomoichontu_bits);                       
                u8g2.sendBuffer();  

                if(step == 0)
                {
                    if(ID>0)
                    {
                        tagStr(ID, tagid);
                        sprintf(ID_doc, "%s", tagid);
                        step=1;
                    }
                }
                else if(step==1)
                {
                    user_check.mat_khau[0] = 1;
                    user_check.mat_khau[1] = 2;
                    user_check.mat_khau[2] = 3;
                    user_check.mat_khau[3] = 4;
                    user_check.mat_khau[4] = 5;
                    user_check.mat_khau[5] = 6;

                    for (int i = 0; i < 13; i++)
                    {
                        user_check.ID_user[i] = ID_doc[i];
                        // Serial.print(user_check.ID_user[i]-'0');
                    }
                    step=2;
                }
                else if(step==2)
                {
                    for(int i=1; i<=24; i++)
                    {
                        if(kiem_tra_dung_tu(i,user_check)==true) //đung tu
                        {
                            if(locker_open(i))
                            {
                                u8g2.clearBuffer();
                                u8g2.drawXBM(0, 0, 128, 64, tudamo_bits);
                                u8g2.sendBuffer();
                                xoatu(i);
                            }
                            else 
                            {
                                u8g2.clearBuffer();
                                u8g2.drawXBM(0, 0, 128, 64, khongmoduoccua_bits);
                                u8g2.sendBuffer();                              
                            }
                            delay(2000);
                            step=3;
                            break;
                        }
                    }
                    exit();
                }
                else if(step==3)
                {
                    exit();
                }
            }

            while(start == 1)
            {
                key = VHITEK::Keypad::getKey();
                if(step==0)
                {
                    u8g2.clearBuffer();
                    u8g2.setFont(u8g2_font_ncenB10_tr);
                    u8g2.setCursor(30, 25);
                    u8g2.printf("VUI LONG");
                    u8g2.setCursor(20, 45);
                    u8g2.printf("DE THE VAO");                                    
                    u8g2.sendBuffer();  

                    if(pos==0)
                    {                       
                        if (ID > 0)
                        {
                            tagStr(ID, tagid);
                            sprintf(ID_doc, "%s", tagid);
                            pos = 1;
                        } 
                    }
                    else 
                    {
                        for (int i = 0; i < 13; i++)
                        {
                            New_user.ID_user[i] = ID_doc[i];
                            // Serial.print(New_user.ID_user[i]-'0');
                        }
                        ID = 0;
                        pos = 0;
                        step=1;
                    }
                }
                else if(step==1)
                {
                    for(int i=0; i<= sizeof(tuchuasd); i++)
                    {
                        if(tuchuasd[i]>0)
                        {
                            New_user.so_tu = tuchuasd[i];
                            if(locker_open(New_user.so_tu)==1)//cua mo
                            {
                                u8g2.clearBuffer();
                                u8g2.drawXBM(0, 0, 128, 64, tudamo_bits);
                                u8g2.sendBuffer();

                                if(VHITEK::EEPROM::write_eeprom_1(New_user))
                                {
                                    tuchuasd[i] = 0;
                                    delay(2000);
                                    step=2;
                                    break;
                                }
                            }
                            else //khong mo duoc
                            {
                                u8g2.clearBuffer();
                                u8g2.drawXBM(0, 0, 128, 64, khongmoduoccua_bits);
                                u8g2.sendBuffer();
                                delay(2000);
                                step=2;
                            }
                        }
                    }
                }
                else if(step==2)
                {
                    exit();
                    break;
                }

                if (key) // Neu co nhan nut
                {
                    if(key == '#')
                    {
                        exit();
                        break;
                    }
                }
            }
        }        




//Sử dụng Board Locker 24
        /*int read_locker_status(uint16_t locker_id)
		{
			uint8_t data1, data2, data3;
			uint8_t bitmaskIndex[24] = {
				0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
				0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01,
				0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
			digitalWrite(PIN_165_LATCH, LOW);
			delay(5);
			digitalWrite(PIN_165_LATCH, HIGH);
			digitalWrite(PIN_595_CLOCK, LOW);
			data1 = shiftIn(PIN_ENC1, PIN_595_CLOCK, MSBFIRST);
			data2 = shiftIn(PIN_ENC1, PIN_595_CLOCK, MSBFIRST);
			data3 = shiftIn(PIN_ENC1, PIN_595_CLOCK, MSBFIRST);
			Serial.printf("Read locker ID %d \r\n", locker_id);
			// printBinary(data1);
			// printBinary(data2);
			// printBinary(data3);
			uint8_t byte_index = locker_id / 8;
			switch (byte_index)
			{
			case 0:
				if (data3 & bitmaskIndex[locker_id])
					return 1;
				break;
			case 1:
				if (data2 & bitmaskIndex[locker_id])
					return 1;
				break;
			case 2:
				if (data1 & bitmaskIndex[locker_id])
					return 1;
				break;
			}

			return 0;
		}
        bool locker_open(uint8_t id)
        {
            if (id > 24)
                return false;
            digitalWrite(PIN_595_LATCH, LOW);
            uint32_t data = 0;
            bitWrite(data, id, 1);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, LSBFIRST, (data >> 16) & 0xff);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, LSBFIRST, (data >> 8) & 0xff);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, MSBFIRST, data & 0xff);
            // Serial.printf("open locker ID %d || value %02X \r\n", id, data);
            digitalWrite(PIN_595_LATCH, HIGH);
            delay(200);
            digitalWrite(PIN_595_LATCH, LOW);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, LSBFIRST, 0);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, LSBFIRST, 0);
            shiftOut(PIN_595_DATA, PIN_595_CLOCK, MSBFIRST, 0);
            digitalWrite(PIN_595_LATCH, HIGH);
            return read_locker_status(id);
        } */

        /*int read_locker_status(uint16_t locker_id)
        {
            uint16_t locker_in_value[9] = {0x00, 0x100, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02};
            uint8_t data1, data2;
            digitalWrite(PIN_165_LATCH, LOW);
            delay(5);
            digitalWrite(PIN_165_LATCH, HIGH);
            digitalWrite(PIN_595_CLOCK, LOW);
            data1 = shiftIn(PIN_ENC1, PIN_595_CLOCK, MSBFIRST);
            data2 = shiftIn(PIN_ENC1, PIN_595_CLOCK, MSBFIRST);
            uint16_t io_val = ((unsigned int)data1 << 8) + data2;
            Serial.printf("%04x %04x\r\n", io_val, io_val & locker_in_value[locker_id]);
            if (io_val & locker_in_value[locker_id])
                return 1;
            return 0;
        }

        void shiftOut16b(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint16_t val)
        {
            uint8_t i;
            for (i = 0; i < 16; i++)
            {
                if (bitOrder == LSBFIRST)
                    digitalWrite(dataPin, !!(val & (1 << i)));
                else
                    digitalWrite(dataPin, !!(val & (1 << (15 - i))));
                digitalWrite(clockPin, HIGH);
                digitalWrite(clockPin, LOW);
            }
        }

        bool locker_open(uint8_t id)
        {
            uint16_t locker_out_value[9] = {0x01, 0x100, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02};
            if (id > 8)
                return false;
            digitalWrite(PIN_595_LATCH, LOW);
            shiftOut16b(PIN_595_DATA, PIN_595_CLOCK, MSBFIRST, locker_out_value[id]);
            Serial.printf("open locker ID %d || value %02X \r\n", id, locker_out_value[id]);
            digitalWrite(PIN_595_LATCH, HIGH);
            delay(150);
            digitalWrite(PIN_595_LATCH, LOW);
            shiftOut16b(PIN_595_DATA, PIN_595_CLOCK, MSBFIRST, 0);
            digitalWrite(PIN_595_LATCH, HIGH);
            delay(50);
            return read_locker_status(id);
        } */




































